version: '3.8'

services:
  # FastAPI application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=development
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
      - COGNITO_USER_POOL_ID=us-east-1_test123
      - COGNITO_CLIENT_ID=test123456789
      - DYNAMODB_ENDPOINT=http://localstack:4566
      - S3_ENDPOINT=http://localstack:4566
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - localstack
      - postgres
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - csa-network

  # LocalStack for AWS service mocking
  localstack:
    image: localstack/localstack:3.0
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - SERVICES=s3,dynamodb,cognito-idp,lambda,apigateway,cloudtrail,sns,sqs,kms
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=/tmp/localstack
    volumes:
      - "/tmp/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./scripts/localstack-init.sh:/etc/localstack/init/ready.d/init.sh"
    networks:
      - csa-network

  # PostgreSQL for local development (alternative to DynamoDB)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=csa_dev
      - POSTGRES_USER=csa_user
      - POSTGRES_PASSWORD=csa_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - "./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql"
    networks:
      - csa-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - csa-network

  # Playwright container for capture testing
  playwright:
    build:
      context: .
      dockerfile: docker/Dockerfile.playwright
    environment:
      - DISPLAY=:99
    volumes:
      - .:/app
      - /tmp/.X11-unix:/tmp/.X11-unix
    networks:
      - csa-network
    profiles:
      - testing

  # Frontend development server (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_COGNITO_USER_POOL_ID=us-east-1_test123
      - REACT_APP_COGNITO_CLIENT_ID=test123456789
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - csa-network
    profiles:
      - frontend

volumes:
  postgres_data:
  redis_data:

networks:
  csa-network:
    driver: bridge