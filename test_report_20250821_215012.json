{
  "start_time": "2025-08-21T21:50:04.750109",
  "end_time": "2025-08-21T21:50:12.289146",
  "total_duration": 7.539037,
  "environment": {
    "python_version": "3.12.3 (v3.12.3:f6650f9ad7, Apr  9 2024, 08:18:47) [Clang 13.0.0 (clang-1300.0.29.30)]",
    "platform": "darwin",
    "cwd": "/Users/dannyelzein/Desktop/Python/Compliance-Screenshot-Archiver",
    "app_env": "test",
    "aws_region": "us-east-1"
  },
  "summary": {
    "total_tests": 7,
    "passed": 4,
    "failed": 3,
    "success_rate": 57.14285714285714,
    "total_duration": 7.539037
  },
  "results": [
    {
      "name": "Environment Validation",
      "success": true,
      "duration": 0.007578134536743164,
      "output": "",
      "error": "",
      "details": {
        "checks": 5,
        "errors": 0
      }
    },
    {
      "name": "Ruff Linting",
      "success": false,
      "duration": 0.05665898323059082,
      "output": "app/api/routes/health.py:94:6: W292 [*] No newline at end of file\n   |\n92 |             },\n93 |         },\n94 |     }\n   |       W292\n   |\n   = help: Add trailing newline\n\napp/auth/deps.py:85:11: PLR0912 Too many branches (13 > 12)\n   |\n85 | async def verify_jwt_token(token: str) -> dict[str, Any]:\n   |           ^^^^^^^^^^^^^^^^ PLR0912\n86 |     \"\"\"\n87 |     Verify JWT token and extract claims.\n   |\n\napp/auth/deps.py:205:48: B008 Do not perform function call `Depends` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable\n    |\n203 |     \"\"\"\n204 | \n205 |     async def _dep(user_info: dict[str, Any] = Depends(get_current_user)) -> dict[str, Any]:\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ B008\n206 |         user_role = user_info.get(\"role\", \"viewer\")\n    |\n\napp/auth/deps.py:256:52: W292 [*] No newline at end of file\n    |\n255 |     # Users can only access their own resources\n256 |     return user_info.get(\"sub\") == resource_user_id\n    |                                                     W292\n    |\n    = help: Add trailing newline\n\napp/storage/dynamo.py:44:5: PLR0913 Too many arguments in function definition (7 > 5)\n   |\n43 | # Capture Operations\n44 | def create_capture(\n   |     ^^^^^^^^^^^^^^ PLR0913\n45 |     capture_id: str,\n46 |     url: str,\n   |\n\napp/storage/dynamo.py:180:5: PLR0913 Too many arguments in function definition (7 > 5)\n    |\n179 | # Schedule Operations\n180 | def create_schedule(\n    |     ^^^^^^^^^^^^^^^ PLR0913\n181 |     schedule_id: str,\n182 |     user_id: str,\n    |\n\napp/storage/s3.py:180:14: PLR2004 Magic value used in comparison, consider replacing `900` with a constant variable\n    |\n179 |     # Ensure TTL doesn't exceed 15 minutes (900 seconds) per security requirements\n180 |     if ttl > 900:\n    |              ^^^ PLR2004\n181 |         logger.warning(f\"Requested TTL {ttl}s exceeds 15 minutes, capping at 900s\")\n182 |         ttl = 900\n    |\n\ntests/conftest.py:26:43: S105 Possible hardcoded password assigned to: \"AWS_SECRET_ACCESS_KEY\"\n   |\n24 |     \"\"\"Mock AWS credentials to prevent accidental real AWS calls.\"\"\"\n25 |     os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\n26 |     os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\n   |                                           ^^^^^^^^^ S105\n27 |     os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\n28 |     os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\n   |\n\ntests/conftest.py:27:40: S105 Possible hardcoded password assigned to: \"AWS_SECURITY_TOKEN\"\n   |\n25 |     os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\n26 |     os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\n27 |     os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\n   |                                        ^^^^^^^^^ S105\n28 |     os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\n   |\n\ntests/conftest.py:28:39: S105 Possible hardcoded password assigned to: \"AWS_SESSION_TOKEN\"\n   |\n26 |     os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\n27 |     os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\n28 |     os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\n   |                                       ^^^^^^^^^ S105\n   |\n\ntests/test_api_captures.py:77:9: S101 Use of `assert` detected\n   |\n75 |         response = client.get(\"/api/captures\")\n76 | \n77 |         assert response.status_code == 200\n   |         ^^^^^^ S101\n78 |         data = response.json()\n79 |         assert len(data) == 2\n   |\n\ntests/test_api_captures.py:77:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   |\n75 |         response = client.get(\"/api/captures\")\n76 | \n77 |         assert response.status_code == 200\n   |                                        ^^^ PLR2004\n78 |         data = response.json()\n79 |         assert len(data) == 2\n   |\n\ntests/test_api_captures.py:79:9: S101 Use of `assert` detected\n   |\n77 |         assert response.status_code == 200\n78 |         data = response.json()\n79 |         assert len(data) == 2\n   |         ^^^^^^ S101\n80 |         assert data[0][\"id\"] == \"capture-1\"\n81 |         assert data[1][\"id\"] == \"capture-2\"\n   |\n\ntests/test_api_captures.py:79:29: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable\n   |\n77 |         assert response.status_code == 200\n78 |         data = response.json()\n79 |         assert len(data) == 2\n   |                             ^ PLR2004\n80 |         assert data[0][\"id\"] == \"capture-1\"\n81 |         assert data[1][\"id\"] == \"capture-2\"\n   |\n\ntests/test_api_captures.py:80:9: S101 Use of `assert` detected\n   |\n78 |         data = response.json()\n79 |         assert len(data) == 2\n80 |         assert data[0][\"id\"] == \"capture-1\"\n   |         ^^^^^^ S101\n81 |         assert data[1][\"id\"] == \"capture-2\"\n   |\n\ntests/test_api_captures.py:81:9: S101 Use of `assert` detected\n   |\n79 |         assert len(data) == 2\n80 |         assert data[0][\"id\"] == \"capture-1\"\n81 |         assert data[1][\"id\"] == \"capture-2\"\n   |         ^^^^^^ S101\n82 | \n83 |     @patch(\"app.api.routes.captures.list_captures_by_user\")\n   |\n\ntests/test_api_captures.py:90:9: S101 Use of `assert` detected\n   |\n88 |         response = client.get('/api/captures?limit=10&last_key={\"capture_id\":\"test-capture\"}')\n89 | \n90 |         assert response.status_code == 200\n   |         ^^^^^^ S101\n91 |         mock_list.assert_called_once_with(\n92 |             user_id=\"test-user-123\",\n   |\n\ntests/test_api_captures.py:90:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   |\n88 |         response = client.get('/api/captures?limit=10&last_key={\"capture_id\":\"test-capture\"}')\n89 | \n90 |         assert response.status_code == 200\n   |                                        ^^^ PLR2004\n91 |         mock_list.assert_called_once_with(\n92 |             user_id=\"test-user-123\",\n   |\n\ntests/test_api_captures.py:101:9: S101 Use of `assert` detected\n    |\n 99 |         response = client.get(\"/api/captures?last_key=invalid-json\")\n100 | \n101 |         assert response.status_code == 400\n    |         ^^^^^^ S101\n102 |         assert \"Invalid pagination token\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:101:40: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable\n    |\n 99 |         response = client.get(\"/api/captures?last_key=invalid-json\")\n100 | \n101 |         assert response.status_code == 400\n    |                                        ^^^ PLR2004\n102 |         assert \"Invalid pagination token\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:102:9: S101 Use of `assert` detected\n    |\n101 |         assert response.status_code == 400\n102 |         assert \"Invalid pagination token\" in response.json()[\"detail\"]\n    |         ^^^^^^ S101\n    |\n\ntests/test_api_captures.py:125:9: S101 Use of `assert` detected\n    |\n123 |         response = client.get(f\"/api/captures/{capture_id}\")\n124 | \n125 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n126 |         data = response.json()\n127 |         assert data[\"id\"] == capture_id\n    |\n\ntests/test_api_captures.py:125:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n123 |         response = client.get(f\"/api/captures/{capture_id}\")\n124 | \n125 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n126 |         data = response.json()\n127 |         assert data[\"id\"] == capture_id\n    |\n\ntests/test_api_captures.py:127:9: S101 Use of `assert` detected\n    |\n125 |         assert response.status_code == 200\n126 |         data = response.json()\n127 |         assert data[\"id\"] == capture_id\n    |         ^^^^^^ S101\n128 |         assert data[\"url\"] == \"https://example.com\"\n    |\n\ntests/test_api_captures.py:128:9: S101 Use of `assert` detected\n    |\n126 |         data = response.json()\n127 |         assert data[\"id\"] == capture_id\n128 |         assert data[\"url\"] == \"https://example.com\"\n    |         ^^^^^^ S101\n129 | \n130 |     @patch(\"app.api.routes.captures.get_capture\")\n    |\n\ntests/test_api_captures.py:137:9: S101 Use of `assert` detected\n    |\n135 |         response = client.get(\"/api/captures/nonexistent\")\n136 | \n137 |         assert response.status_code == 404\n    |         ^^^^^^ S101\n138 |         assert \"Capture not found\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:137:40: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable\n    |\n135 |         response = client.get(\"/api/captures/nonexistent\")\n136 | \n137 |         assert response.status_code == 404\n    |                                        ^^^ PLR2004\n138 |         assert \"Capture not found\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:138:9: S101 Use of `assert` detected\n    |\n137 |         assert response.status_code == 404\n138 |         assert \"Capture not found\" in response.json()[\"detail\"]\n    |         ^^^^^^ S101\n139 | \n140 |     @patch(\"app.api.routes.captures.get_capture\")\n    |\n\ntests/test_api_captures.py:155:9: S101 Use of `assert` detected\n    |\n153 |         response = client.get(\"/api/captures/test-capture\")\n154 | \n155 |         assert response.status_code == 403\n    |         ^^^^^^ S101\n156 |         assert \"Access denied\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:155:40: PLR2004 Magic value used in comparison, consider replacing `403` with a constant variable\n    |\n153 |         response = client.get(\"/api/captures/test-capture\")\n154 | \n155 |         assert response.status_code == 403\n    |                                        ^^^ PLR2004\n156 |         assert \"Access denied\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:156:9: S101 Use of `assert` detected\n    |\n155 |         assert response.status_code == 403\n156 |         assert \"Access denied\" in response.json()[\"detail\"]\n    |         ^^^^^^ S101\n157 | \n158 |     @patch(\"app.api.routes.captures.get_capture\")\n    |\n\ntests/test_api_captures.py:175:9: S101 Use of `assert` detected\n    |\n173 |         response = client.get(f\"/api/captures/{capture_id}\")\n174 | \n175 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n176 |         data = response.json()\n177 |         assert data[\"status\"] == \"completed\"  # Should default to \"completed\"\n    |\n\ntests/test_api_captures.py:175:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n173 |         response = client.get(f\"/api/captures/{capture_id}\")\n174 | \n175 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n176 |         data = response.json()\n177 |         assert data[\"status\"] == \"completed\"  # Should default to \"completed\"\n    |\n\ntests/test_api_captures.py:177:9: S101 Use of `assert` detected\n    |\n175 |         assert response.status_code == 200\n176 |         data = response.json()\n177 |         assert data[\"status\"] == \"completed\"  # Should default to \"completed\"\n    |         ^^^^^^ S101\n    |\n\ntests/test_api_captures.py:200:9: S101 Use of `assert` detected\n    |\n198 |         response = client.get(f\"/api/captures/{capture_id}/download\")\n199 | \n200 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n201 |         data = response.json()\n202 |         assert \"download_url\" in data\n    |\n\ntests/test_api_captures.py:200:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n198 |         response = client.get(f\"/api/captures/{capture_id}/download\")\n199 | \n200 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n201 |         data = response.json()\n202 |         assert \"download_url\" in data\n    |\n\ntests/test_api_captures.py:202:9: S101 Use of `assert` detected\n    |\n200 |         assert response.status_code == 200\n201 |         data = response.json()\n202 |         assert \"download_url\" in data\n    |         ^^^^^^ S101\n203 |         assert data[\"expires_in\"] == \"900\"\n204 |         assert data[\"content_type\"] == \"application/pdf\"\n    |\n\ntests/test_api_captures.py:203:9: S101 Use of `assert` detected\n    |\n201 |         data = response.json()\n202 |         assert \"download_url\" in data\n203 |         assert data[\"expires_in\"] == \"900\"\n    |         ^^^^^^ S101\n204 |         assert data[\"content_type\"] == \"application/pdf\"\n205 |         assert data[\"filename\"] == f\"{capture_id}.pdf\"\n    |\n\ntests/test_api_captures.py:204:9: S101 Use of `assert` detected\n    |\n202 |         assert \"download_url\" in data\n203 |         assert data[\"expires_in\"] == \"900\"\n204 |         assert data[\"content_type\"] == \"application/pdf\"\n    |         ^^^^^^ S101\n205 |         assert data[\"filename\"] == f\"{capture_id}.pdf\"\n    |\n\ntests/test_api_captures.py:205:9: S101 Use of `assert` detected\n    |\n203 |         assert data[\"expires_in\"] == \"900\"\n204 |         assert data[\"content_type\"] == \"application/pdf\"\n205 |         assert data[\"filename\"] == f\"{capture_id}.pdf\"\n    |         ^^^^^^ S101\n206 | \n207 |     @patch(\"app.api.routes.captures.get_capture\")\n    |\n\ntests/test_api_captures.py:214:9: S101 Use of `assert` detected\n    |\n212 |         response = client.get(\"/api/captures/nonexistent/download\")\n213 | \n214 |         assert response.status_code == 404\n    |         ^^^^^^ S101\n215 | \n216 |     @patch(\"app.api.routes.captures.get_capture\")\n    |\n\ntests/test_api_captures.py:214:40: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable\n    |\n212 |         response = client.get(\"/api/captures/nonexistent/download\")\n213 | \n214 |         assert response.status_code == 404\n    |                                        ^^^ PLR2004\n215 | \n216 |     @patch(\"app.api.routes.captures.get_capture\")\n    |\n\ntests/test_api_captures.py:228:9: S101 Use of `assert` detected\n    |\n226 |         response = client.get(\"/api/captures/test-capture/download\")\n227 | \n228 |         assert response.status_code == 403\n    |         ^^^^^^ S101\n229 | \n230 |     @patch(\"app.api.routes.captures.presign_download\")\n    |\n\ntests/test_api_captures.py:228:40: PLR2004 Magic value used in comparison, consider replacing `403` with a constant variable\n    |\n226 |         response = client.get(\"/api/captures/test-capture/download\")\n227 | \n228 |         assert response.status_code == 403\n    |                                        ^^^ PLR2004\n229 | \n230 |     @patch(\"app.api.routes.captures.presign_download\")\n    |\n\ntests/test_api_captures.py:247:9: S101 Use of `assert` detected\n    |\n245 |         response = client.get(f\"/api/captures/{capture_id}/download\")\n246 | \n247 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n248 |         data = response.json()\n249 |         assert data[\"content_type\"] == \"image/png\"\n    |\n\ntests/test_api_captures.py:247:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n245 |         response = client.get(f\"/api/captures/{capture_id}/download\")\n246 | \n247 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n248 |         data = response.json()\n249 |         assert data[\"content_type\"] == \"image/png\"\n    |\n\ntests/test_api_captures.py:249:9: S101 Use of `assert` detected\n    |\n247 |         assert response.status_code == 200\n248 |         data = response.json()\n249 |         assert data[\"content_type\"] == \"image/png\"\n    |         ^^^^^^ S101\n250 |         assert data[\"filename\"] == f\"{capture_id}.png\"\n    |\n\ntests/test_api_captures.py:250:9: S101 Use of `assert` detected\n    |\n248 |         data = response.json()\n249 |         assert data[\"content_type\"] == \"image/png\"\n250 |         assert data[\"filename\"] == f\"{capture_id}.png\"\n    |         ^^^^^^ S101\n    |\n\ntests/test_api_captures.py:272:9: S101 Use of `assert` detected\n    |\n270 |         )\n271 | \n272 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n273 |         data = response.json()\n274 |         assert data[\"capture_id\"] == \"new-capture-123\"\n    |\n\ntests/test_api_captures.py:272:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n270 |         )\n271 | \n272 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n273 |         data = response.json()\n274 |         assert data[\"capture_id\"] == \"new-capture-123\"\n    |\n\ntests/test_api_captures.py:274:9: S101 Use of `assert` detected\n    |\n272 |         assert response.status_code == 200\n273 |         data = response.json()\n274 |         assert data[\"capture_id\"] == \"new-capture-123\"\n    |         ^^^^^^ S101\n275 |         assert data[\"status\"] == \"completed\"\n276 |         assert data[\"url\"] == \"https://example.com\"\n    |\n\ntests/test_api_captures.py:275:9: S101 Use of `assert` detected\n    |\n273 |         data = response.json()\n274 |         assert data[\"capture_id\"] == \"new-capture-123\"\n275 |         assert data[\"status\"] == \"completed\"\n    |         ^^^^^^ S101\n276 |         assert data[\"url\"] == \"https://example.com\"\n    |\n\ntests/test_api_captures.py:276:9: S101 Use of `assert` detected\n    |\n274 |         assert data[\"capture_id\"] == \"new-capture-123\"\n275 |         assert data[\"status\"] == \"completed\"\n276 |         assert data[\"url\"] == \"https://example.com\"\n    |         ^^^^^^ S101\n277 | \n278 |     @patch(\"app.api.routes.captures.process_capture_request\")\n    |\n\ntests/test_api_captures.py:294:9: S101 Use of `assert` detected\n    |\n292 |         )\n293 | \n294 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n295 |         data = response.json()\n296 |         assert data[\"artifact_type\"] == \"png\"\n    |\n\ntests/test_api_captures.py:294:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n292 |         )\n293 | \n294 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n295 |         data = response.json()\n296 |         assert data[\"artifact_type\"] == \"png\"\n    |\n\ntests/test_api_captures.py:296:9: S101 Use of `assert` detected\n    |\n294 |         assert response.status_code == 200\n295 |         data = response.json()\n296 |         assert data[\"artifact_type\"] == \"png\"\n    |         ^^^^^^ S101\n297 | \n298 |     @patch(\"app.api.routes.captures.process_capture_request\")\n    |\n\ntests/test_api_captures.py:307:9: S101 Use of `assert` detected\n    |\n305 |         )\n306 | \n307 |         assert response.status_code == 500\n    |         ^^^^^^ S101\n308 |         assert \"Capture failed\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:307:40: PLR2004 Magic value used in comparison, consider replacing `500` with a constant variable\n    |\n305 |         )\n306 | \n307 |         assert response.status_code == 500\n    |                                        ^^^ PLR2004\n308 |         assert \"Capture failed\" in response.json()[\"detail\"]\n    |\n\ntests/test_api_captures.py:308:9: S101 Use of `assert` detected\n    |\n307 |         assert response.status_code == 500\n308 |         assert \"Capture failed\" in response.json()[\"detail\"]\n    |         ^^^^^^ S101\n309 | \n310 |     def test_trigger_capture_invalid_type(self, client: TestClient) -> None:\n    |\n\ntests/test_api_captures.py:318:9: S101 Use of `assert` detected\n    |\n316 |         )\n317 | \n318 |         assert response.status_code == 422  # Validation error\n    |         ^^^^^^ S101\n    |\n\ntests/test_api_captures.py:318:40: PLR2004 Magic value used in comparison, consider replacing `422` with a constant variable\n    |\n316 |         )\n317 | \n318 |         assert response.status_code == 422  # Validation error\n    |                                        ^^^ PLR2004\n    |\n\ntests/test_api_captures.py:342:9: S101 Use of `assert` detected\n    |\n340 |         response = client.post(\"/api/captures/verify\", params={\"sha256\": sha256})\n341 | \n342 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n343 |         data = response.json()\n344 |         assert data[\"verified\"] is True\n    |\n\ntests/test_api_captures.py:342:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n340 |         response = client.post(\"/api/captures/verify\", params={\"sha256\": sha256})\n341 | \n342 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n343 |         data = response.json()\n344 |         assert data[\"verified\"] is True\n    |\n\ntests/test_api_captures.py:344:9: S101 Use of `assert` detected\n    |\n342 |         assert response.status_code == 200\n343 |         data = response.json()\n344 |         assert data[\"verified\"] is True\n    |         ^^^^^^ S101\n345 |         assert data[\"capture_id\"] == \"verified-capture\"\n346 |         assert data[\"object_lock_verified\"] is True\n    |\n\ntests/test_api_captures.py:345:9: S101 Use of `assert` detected\n    |\n343 |         data = response.json()\n344 |         assert data[\"verified\"] is True\n345 |         assert data[\"capture_id\"] == \"verified-capture\"\n    |         ^^^^^^ S101\n346 |         assert data[\"object_lock_verified\"] is True\n347 |         assert data[\"sha256\"] == sha256\n    |\n\ntests/test_api_captures.py:346:9: S101 Use of `assert` detected\n    |\n344 |         assert data[\"verified\"] is True\n345 |         assert data[\"capture_id\"] == \"verified-capture\"\n346 |         assert data[\"object_lock_verified\"] is True\n    |         ^^^^^^ S101\n347 |         assert data[\"sha256\"] == sha256\n    |\n\ntests/test_api_captures.py:347:9: S101 Use of `assert` detected\n    |\n345 |         assert data[\"capture_id\"] == \"verified-capture\"\n346 |         assert data[\"object_lock_verified\"] is True\n347 |         assert data[\"sha256\"] == sha256\n    |         ^^^^^^ S101\n348 | \n349 |     @patch(\"app.storage.dynamo.get_capture_by_hash\")\n    |\n\ntests/test_api_captures.py:357:9: S101 Use of `assert` detected\n    |\n355 |         response = client.post(\"/api/captures/verify\", params={\"sha256\": sha256})\n356 | \n357 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n358 |         data = response.json()\n359 |         assert data[\"verified\"] is False\n    |\n\ntests/test_api_captures.py:357:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n355 |         response = client.post(\"/api/captures/verify\", params={\"sha256\": sha256})\n356 | \n357 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n358 |         data = response.json()\n359 |         assert data[\"verified\"] is False\n    |\n\ntests/test_api_captures.py:359:9: S101 Use of `assert` detected\n    |\n357 |         assert response.status_code == 200\n358 |         data = response.json()\n359 |         assert data[\"verified\"] is False\n    |         ^^^^^^ S101\n360 |         assert data[\"reason\"] == \"No capture found with this hash\"\n361 |         assert data[\"sha256\"] == sha256\n    |\n\ntests/test_api_captures.py:360:9: S101 Use of `assert` detected\n    |\n358 |         data = response.json()\n359 |         assert data[\"verified\"] is False\n360 |         assert data[\"reason\"] == \"No capture found with this hash\"\n    |         ^^^^^^ S101\n361 |         assert data[\"sha256\"] == sha256\n    |\n\ntests/test_api_captures.py:361:9: S101 Use of `assert` detected\n    |\n359 |         assert data[\"verified\"] is False\n360 |         assert data[\"reason\"] == \"No capture found with this hash\"\n361 |         assert data[\"sha256\"] == sha256\n    |         ^^^^^^ S101\n362 | \n363 |     @patch(\"app.storage.s3.verify_object_lock\")\n    |\n\ntests/test_api_captures.py:381:9: S101 Use of `assert` detected\n    |\n379 |         response = client.post(\"/api/captures/verify\", params={\"sha256\": sha256})\n380 | \n381 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n382 |         data = response.json()\n383 |         assert data[\"verified\"] is True  # Capture exists\n    |\n\ntests/test_api_captures.py:381:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n379 |         response = client.post(\"/api/captures/verify\", params={\"sha256\": sha256})\n380 | \n381 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n382 |         data = response.json()\n383 |         assert data[\"verified\"] is True  # Capture exists\n    |\n\ntests/test_api_captures.py:383:9: S101 Use of `assert` detected\n    |\n381 |         assert response.status_code == 200\n382 |         data = response.json()\n383 |         assert data[\"verified\"] is True  # Capture exists\n    |         ^^^^^^ S101\n384 |         assert data[\"object_lock_verified\"] is False  # But Object Lock failed\n    |\n\ntests/test_api_captures.py:384:9: S101 Use of `assert` detected\n    |\n382 |         data = response.json()\n383 |         assert data[\"verified\"] is True  # Capture exists\n384 |         assert data[\"object_lock_verified\"] is False  # But Object Lock failed\n    |         ^^^^^^ S101\n    |\n\ntests/test_auth.py:42:9: S101 Use of `assert` detected\n   |\n41 |         # Assert\n42 |         assert result[\"sub\"] == \"user-123\"\n   |         ^^^^^^ S101\n43 |         assert result[\"email\"] == \"test@example.com\"\n44 |         assert result[\"role\"] == \"admin\"\n   |\n\ntests/test_auth.py:43:9: S101 Use of `assert` detected\n   |\n41 |         # Assert\n42 |         assert result[\"sub\"] == \"user-123\"\n43 |         assert result[\"email\"] == \"test@example.com\"\n   |         ^^^^^^ S101\n44 |         assert result[\"role\"] == \"admin\"\n45 |         assert result[\"cognito_groups\"] == [\"admin\"]\n   |\n\ntests/test_auth.py:44:9: S101 Use of `assert` detected\n   |\n42 |         assert result[\"sub\"] == \"user-123\"\n43 |         assert result[\"email\"] == \"test@example.com\"\n44 |         assert result[\"role\"] == \"admin\"\n   |         ^^^^^^ S101\n45 |         assert result[\"cognito_groups\"] == [\"admin\"]\n   |\n\ntests/test_auth.py:45:9: S101 Use of `assert` detected\n   |\n43 |         assert result[\"email\"] == \"test@example.com\"\n44 |         assert result[\"role\"] == \"admin\"\n45 |         assert result[\"cognito_groups\"] == [\"admin\"]\n   |         ^^^^^^ S101\n46 | \n47 |     @pytest.mark.asyncio\n   |\n\ntests/test_auth.py:59:9: S101 Use of `assert` detected\n   |\n57 |         with pytest.raises(AuthenticationError) as exc_info:\n58 |             await verify_jwt_token(\"invalid-token\")\n59 |         assert \"Token missing key ID\" in str(exc_info.value.detail)\n   |         ^^^^^^ S101\n60 | \n61 |     @pytest.mark.asyncio\n   |\n\ntests/test_auth.py:73:9: S101 Use of `assert` detected\n   |\n71 |         with pytest.raises(AuthenticationError) as exc_info:\n72 |             await verify_jwt_token(\"invalid-token\")\n73 |         assert \"Unable to find signing key\" in str(exc_info.value.detail)\n   |         ^^^^^^ S101\n74 | \n75 |     def test_role_hierarchy(self):\n   |\n\ntests/test_auth.py:77:9: S101 Use of `assert` detected\n   |\n75 |     def test_role_hierarchy(self):\n76 |         \"\"\"Test role hierarchy values are correct.\"\"\"\n77 |         assert ROLE_HIERARCHY[\"admin\"] > ROLE_HIERARCHY[\"operator\"]\n   |         ^^^^^^ S101\n78 |         assert ROLE_HIERARCHY[\"operator\"] > ROLE_HIERARCHY[\"viewer\"]\n   |\n\ntests/test_auth.py:78:9: S101 Use of `assert` detected\n   |\n76 |         \"\"\"Test role hierarchy values are correct.\"\"\"\n77 |         assert ROLE_HIERARCHY[\"admin\"] > ROLE_HIERARCHY[\"operator\"]\n78 |         assert ROLE_HIERARCHY[\"operator\"] > ROLE_HIERARCHY[\"viewer\"]\n   |         ^^^^^^ S101\n79 | \n80 |     def test_cognito_group_mapping(self):\n   |\n\ntests/test_auth.py:82:9: S101 Use of `assert` detected\n   |\n80 |     def test_cognito_group_mapping(self):\n81 |         \"\"\"Test Cognito group to role mapping.\"\"\"\n82 |         assert COGNITO_GROUP_TO_ROLE[\"admin\"] == \"admin\"\n   |         ^^^^^^ S101\n83 |         assert COGNITO_GROUP_TO_ROLE[\"user\"] == \"operator\"\n84 |         assert COGNITO_GROUP_TO_ROLE[\"auditor\"] == \"viewer\"\n   |\n\ntests/test_auth.py:83:9: S101 Use of `assert` detected\n   |\n81 |         \"\"\"Test Cognito group to role mapping.\"\"\"\n82 |         assert COGNITO_GROUP_TO_ROLE[\"admin\"] == \"admin\"\n83 |         assert COGNITO_GROUP_TO_ROLE[\"user\"] == \"operator\"\n   |         ^^^^^^ S101\n84 |         assert COGNITO_GROUP_TO_ROLE[\"auditor\"] == \"viewer\"\n   |\n\ntests/test_auth.py:84:9: S101 Use of `assert` detected\n   |\n82 |         assert COGNITO_GROUP_TO_ROLE[\"admin\"] == \"admin\"\n83 |         assert COGNITO_GROUP_TO_ROLE[\"user\"] == \"operator\"\n84 |         assert COGNITO_GROUP_TO_ROLE[\"auditor\"] == \"viewer\"\n   |         ^^^^^^ S101\n85 | \n86 |     def test_is_admin(self):\n   |\n\ntests/test_auth.py:91:9: S101 Use of `assert` detected\n   |\n89 |         operator_user = {\"role\": \"operator\", \"sub\": \"user-456\"}\n90 | \n91 |         assert is_admin(admin_user) is True\n   |         ^^^^^^ S101\n92 |         assert is_admin(operator_user) is False\n   |\n\ntests/test_auth.py:92:9: S101 Use of `assert` detected\n   |\n91 |         assert is_admin(admin_user) is True\n92 |         assert is_admin(operator_user) is False\n   |         ^^^^^^ S101\n93 | \n94 |     def test_can_access_user_resource(self):\n   |\n\ntests/test_auth.py:100:9: S101 Use of `assert` detected\n    |\n 99 |         # Admin can access any resource\n100 |         assert can_access_user_resource(admin_user, \"any-user-id\") is True\n    |         ^^^^^^ S101\n101 | \n102 |         # Regular user can access own resources\n    |\n\ntests/test_auth.py:103:9: S101 Use of `assert` detected\n    |\n102 |         # Regular user can access own resources\n103 |         assert can_access_user_resource(regular_user, \"user-456\") is True\n    |         ^^^^^^ S101\n104 | \n105 |         # Regular user cannot access other user's resources\n    |\n\ntests/test_auth.py:106:9: S101 Use of `assert` detected\n    |\n105 |         # Regular user cannot access other user's resources\n106 |         assert can_access_user_resource(regular_user, \"other-user\") is False\n    |         ^^^^^^ S101\n107 | \n108 |     @pytest.mark.asyncio\n    |\n\ntests/test_auth.py:118:9: S101 Use of `assert` detected\n    |\n116 |         with pytest.raises(AuthenticationError) as exc_info:\n117 |             await get_current_user(mock_request)\n118 |         assert \"Authorization header missing\" in str(exc_info.value.detail)\n    |         ^^^^^^ S101\n119 | \n120 |     @pytest.mark.asyncio\n    |\n\ntests/test_auth.py:130:9: S101 Use of `assert` detected\n    |\n128 |         with pytest.raises(AuthenticationError) as exc_info:\n129 |             await get_current_user(mock_request)\n130 |         assert \"Invalid authorization scheme\" in str(exc_info.value.detail)\n    |         ^^^^^^ S101\n131 | \n132 |     @pytest.mark.asyncio\n    |\n\ntests/test_auth.py:142:9: S101 Use of `assert` detected\n    |\n140 |         with pytest.raises(AuthenticationError) as exc_info:\n141 |             await get_current_user(mock_request)\n142 |         assert \"Invalid authorization header format\" in str(exc_info.value.detail)\n    |         ^^^^^^ S101\n143 | \n144 |     @pytest.mark.asyncio\n    |\n\ntests/test_auth.py:155:9: S101 Use of `assert` detected\n    |\n154 |         # Assert\n155 |         assert result == user_info\n    |         ^^^^^^ S101\n156 | \n157 |     @pytest.mark.asyncio\n    |\n\ntests/test_auth.py:167:9: S101 Use of `assert` detected\n    |\n165 |         with pytest.raises(AuthorizationError) as exc_info:\n166 |             await admin_role_dep(user_info)\n167 |         assert \"Role 'admin' required\" in str(exc_info.value.detail)\n    |         ^^^^^^ S101\n    |\n\ntests/test_capture_engine.py:25:9: S101 Use of `assert` detected\n   |\n23 |         result = await capture_webpage(url, artifact_type)\n24 | \n25 |         assert result[\"url\"] == url\n   |         ^^^^^^ S101\n26 |         assert result[\"artifact_type\"] == artifact_type\n27 |         assert result[\"data\"] == b\"fake_pdf_content\"\n   |\n\ntests/test_capture_engine.py:26:9: S101 Use of `assert` detected\n   |\n25 |         assert result[\"url\"] == url\n26 |         assert result[\"artifact_type\"] == artifact_type\n   |         ^^^^^^ S101\n27 |         assert result[\"data\"] == b\"fake_pdf_content\"\n28 |         assert result[\"content_length\"] == len(b\"fake_pdf_content\")\n   |\n\ntests/test_capture_engine.py:27:9: S101 Use of `assert` detected\n   |\n25 |         assert result[\"url\"] == url\n26 |         assert result[\"artifact_type\"] == artifact_type\n27 |         assert result[\"data\"] == b\"fake_pdf_content\"\n   |         ^^^^^^ S101\n28 |         assert result[\"content_length\"] == len(b\"fake_pdf_content\")\n   |\n\ntests/test_capture_engine.py:28:9: S101 Use of `assert` detected\n   |\n26 |         assert result[\"artifact_type\"] == artifact_type\n27 |         assert result[\"data\"] == b\"fake_pdf_content\"\n28 |         assert result[\"content_length\"] == len(b\"fake_pdf_content\")\n   |         ^^^^^^ S101\n29 | \n30 |         # Verify SHA-256 hash is correct\n   |\n\ntests/test_capture_engine.py:32:9: S101 Use of `assert` detected\n   |\n30 |         # Verify SHA-256 hash is correct\n31 |         expected_hash = hashlib.sha256(b\"fake_pdf_content\").hexdigest()\n32 |         assert result[\"sha256\"] == expected_hash\n   |         ^^^^^^ S101\n33 | \n34 |     @pytest.mark.asyncio\n   |\n\ntests/test_capture_engine.py:42:9: S101 Use of `assert` detected\n   |\n40 |         result = await capture_webpage(url, artifact_type)\n41 | \n42 |         assert result[\"url\"] == url\n   |         ^^^^^^ S101\n43 |         assert result[\"artifact_type\"] == artifact_type\n44 |         assert result[\"data\"] == b\"fake_png_content\"\n   |\n\ntests/test_capture_engine.py:43:9: S101 Use of `assert` detected\n   |\n42 |         assert result[\"url\"] == url\n43 |         assert result[\"artifact_type\"] == artifact_type\n   |         ^^^^^^ S101\n44 |         assert result[\"data\"] == b\"fake_png_content\"\n45 |         assert result[\"content_length\"] == len(b\"fake_png_content\")\n   |\n\ntests/test_capture_engine.py:44:9: S101 Use of `assert` detected\n   |\n42 |         assert result[\"url\"] == url\n43 |         assert result[\"artifact_type\"] == artifact_type\n44 |         assert result[\"data\"] == b\"fake_png_content\"\n   |         ^^^^^^ S101\n45 |         assert result[\"content_length\"] == len(b\"fake_png_content\")\n   |\n\ntests/test_capture_engine.py:45:9: S101 Use of `assert` detected\n   |\n43 |         assert result[\"artifact_type\"] == artifact_type\n44 |         assert result[\"data\"] == b\"fake_png_content\"\n45 |         assert result[\"content_length\"] == len(b\"fake_png_content\")\n   |         ^^^^^^ S101\n46 | \n47 |         # Verify SHA-256 hash is correct\n   |\n\ntests/test_capture_engine.py:49:9: S101 Use of `assert` detected\n   |\n47 |         # Verify SHA-256 hash is correct\n48 |         expected_hash = hashlib.sha256(b\"fake_png_content\").hexdigest()\n49 |         assert result[\"sha256\"] == expected_hash\n   |         ^^^^^^ S101\n50 | \n51 |     @pytest.mark.asyncio\n   |\n\ntests/test_capture_engine.py:67:9: F841 Local variable `result` is assigned to but never used\n   |\n65 |         viewport_height = 900\n66 | \n67 |         result = await capture_webpage(\n   |         ^^^^^^ F841\n68 |             url, viewport_width=viewport_width, viewport_height=viewport_height\n69 |         )\n   |\n   = help: Remove assignment to unused variable `result`\n\ntests/test_capture_engine.py:76:9: S101 Use of `assert` detected\n   |\n74 |         context_kwargs = mock_browser.new_context.call_args[1]\n75 | \n76 |         assert context_kwargs[\"viewport\"][\"width\"] == viewport_width\n   |         ^^^^^^ S101\n77 |         assert context_kwargs[\"viewport\"][\"height\"] == viewport_height\n   |\n\ntests/test_capture_engine.py:77:9: S101 Use of `assert` detected\n   |\n76 |         assert context_kwargs[\"viewport\"][\"width\"] == viewport_width\n77 |         assert context_kwargs[\"viewport\"][\"height\"] == viewport_height\n   |         ^^^^^^ S101\n78 | \n79 |     @pytest.mark.asyncio\n   |\n\ntests/test_capture_engine.py:158:13: S101 Use of `assert` detected\n    |\n156 |             result = capture_stub(url, artifact_type)\n157 | \n158 |             assert result[\"url\"] == url\n    |             ^^^^^^ S101\n159 |             assert result[\"artifact_type\"] == artifact_type\n    |\n\ntests/test_capture_engine.py:159:13: S101 Use of `assert` detected\n    |\n158 |             assert result[\"url\"] == url\n159 |             assert result[\"artifact_type\"] == artifact_type\n    |             ^^^^^^ S101\n160 | \n161 |     def test_capture_stub_png(self) -> None:\n    |\n\ntests/test_capture_engine.py:177:13: S101 Use of `assert` detected\n    |\n175 |             result = capture_stub(url, artifact_type)\n176 | \n177 |             assert result[\"url\"] == url\n    |             ^^^^^^ S101\n178 |             assert result[\"artifact_type\"] == artifact_type\n    |\n\ntests/test_capture_engine.py:178:13: S101 Use of `assert` detected\n    |\n177 |             assert result[\"url\"] == url\n178 |             assert result[\"artifact_type\"] == artifact_type\n    |             ^^^^^^ S101\n179 | \n180 |     def test_capture_stub_default_type(self) -> None:\n    |\n\ntests/test_capture_engine.py:195:13: S101 Use of `assert` detected\n    |\n193 |             result = capture_stub(url)\n194 | \n195 |             assert result[\"artifact_type\"] == \"pdf\"\n    |             ^^^^^^ S101\n    |\n\ntests/test_integration_auth.py:20:9: S101 Use of `assert` detected\n   |\n18 |         \"\"\"Test that health endpoint doesn't require authentication.\"\"\"\n19 |         response = self.client.get(\"/api/health\")\n20 |         assert response.status_code == 200\n   |         ^^^^^^ S101\n21 |         data = response.json()\n22 |         assert data[\"status\"] == \"healthy\"\n   |\n\ntests/test_integration_auth.py:20:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   |\n18 |         \"\"\"Test that health endpoint doesn't require authentication.\"\"\"\n19 |         response = self.client.get(\"/api/health\")\n20 |         assert response.status_code == 200\n   |                                        ^^^ PLR2004\n21 |         data = response.json()\n22 |         assert data[\"status\"] == \"healthy\"\n   |\n\ntests/test_integration_auth.py:22:9: S101 Use of `assert` detected\n   |\n20 |         assert response.status_code == 200\n21 |         data = response.json()\n22 |         assert data[\"status\"] == \"healthy\"\n   |         ^^^^^^ S101\n23 |         assert \"auth\" in data\n   |\n\ntests/test_integration_auth.py:23:9: S101 Use of `assert` detected\n   |\n21 |         data = response.json()\n22 |         assert data[\"status\"] == \"healthy\"\n23 |         assert \"auth\" in data\n   |         ^^^^^^ S101\n24 | \n25 |     def test_auth_config_no_auth_required(self):\n   |\n\ntests/test_integration_auth.py:28:9: S101 Use of `assert` detected\n   |\n26 |         \"\"\"Test that auth config endpoint doesn't require authentication.\"\"\"\n27 |         response = self.client.get(\"/api/auth/config\")\n28 |         assert response.status_code == 200\n   |         ^^^^^^ S101\n29 |         data = response.json()\n30 |         assert \"cognito\" in data\n   |\n\ntests/test_integration_auth.py:28:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   |\n26 |         \"\"\"Test that auth config endpoint doesn't require authentication.\"\"\"\n27 |         response = self.client.get(\"/api/auth/config\")\n28 |         assert response.status_code == 200\n   |                                        ^^^ PLR2004\n29 |         data = response.json()\n30 |         assert \"cognito\" in data\n   |\n\ntests/test_integration_auth.py:30:9: S101 Use of `assert` detected\n   |\n28 |         assert response.status_code == 200\n29 |         data = response.json()\n30 |         assert \"cognito\" in data\n   |         ^^^^^^ S101\n31 |         assert \"roles\" in data\n32 |         assert data[\"roles\"][\"available\"] == [\"viewer\", \"operator\", \"admin\"]\n   |\n\ntests/test_integration_auth.py:31:9: S101 Use of `assert` detected\n   |\n29 |         data = response.json()\n30 |         assert \"cognito\" in data\n31 |         assert \"roles\" in data\n   |         ^^^^^^ S101\n32 |         assert data[\"roles\"][\"available\"] == [\"viewer\", \"operator\", \"admin\"]\n   |\n\ntests/test_integration_auth.py:32:9: S101 Use of `assert` detected\n   |\n30 |         assert \"cognito\" in data\n31 |         assert \"roles\" in data\n32 |         assert data[\"roles\"][\"available\"] == [\"viewer\", \"operator\", \"admin\"]\n   |         ^^^^^^ S101\n33 | \n34 |     def test_protected_endpoint_no_token(self):\n   |\n\ntests/test_integration_auth.py:37:9: S101 Use of `assert` detected\n   |\n35 |         \"\"\"Test that protected endpoints require authentication.\"\"\"\n36 |         response = self.client.get(\"/api/captures\")\n37 |         assert response.status_code == 401\n   |         ^^^^^^ S101\n38 |         assert \"Authorization header missing\" in response.json()[\"detail\"]\n   |\n\ntests/test_integration_auth.py:37:40: PLR2004 Magic value used in comparison, consider replacing `401` with a constant variable\n   |\n35 |         \"\"\"Test that protected endpoints require authentication.\"\"\"\n36 |         response = self.client.get(\"/api/captures\")\n37 |         assert response.status_code == 401\n   |                                        ^^^ PLR2004\n38 |         assert \"Authorization header missing\" in response.json()[\"detail\"]\n   |\n\ntests/test_integration_auth.py:38:9: S101 Use of `assert` detected\n   |\n36 |         response = self.client.get(\"/api/captures\")\n37 |         assert response.status_code == 401\n38 |         assert \"Authorization header missing\" in response.json()[\"detail\"]\n   |         ^^^^^^ S101\n39 | \n40 |     def test_protected_endpoint_invalid_token(self):\n   |\n\ntests/test_integration_auth.py:50:13: S101 Use of `assert` detected\n   |\n49 |             response = self.client.get(\"/api/captures\", headers=headers)\n50 |             assert response.status_code == 401\n   |             ^^^^^^ S101\n51 | \n52 |     def test_protected_endpoint_insufficient_role(self):\n   |\n\ntests/test_integration_auth.py:50:44: PLR2004 Magic value used in comparison, consider replacing `401` with a constant variable\n   |\n49 |             response = self.client.get(\"/api/captures\", headers=headers)\n50 |             assert response.status_code == 401\n   |                                            ^^^ PLR2004\n51 | \n52 |     def test_protected_endpoint_insufficient_role(self):\n   |\n\ntests/test_integration_auth.py:68:13: S101 Use of `assert` detected\n   |\n66 |                 \"/api/captures/trigger?url=https://example.com\", headers=headers\n67 |             )\n68 |             assert response.status_code == 403\n   |             ^^^^^^ S101\n69 |             assert \"Role 'operator' required\" in response.json()[\"detail\"]\n   |\n\ntests/test_integration_auth.py:68:44: PLR2004 Magic value used in comparison, consider replacing `403` with a constant variable\n   |\n66 |                 \"/api/captures/trigger?url=https://example.com\", headers=headers\n67 |             )\n68 |             assert response.status_code == 403\n   |                                            ^^^ PLR2004\n69 |             assert \"Role 'operator' required\" in response.json()[\"detail\"]\n   |\n\ntests/test_integration_auth.py:69:13: S101 Use of `assert` detected\n   |\n67 |             )\n68 |             assert response.status_code == 403\n69 |             assert \"Role 'operator' required\" in response.json()[\"detail\"]\n   |             ^^^^^^ S101\n70 | \n71 |     @patch(\"app.api.routes.captures.list_captures_by_user\")\n   |\n\ntests/test_integration_auth.py:89:9: S101 Use of `assert` detected\n   |\n87 |         response = self.client.get(\"/api/captures\", headers=headers)\n88 | \n89 |         assert response.status_code == 200\n   |         ^^^^^^ S101\n90 |         assert response.json() == []\n   |\n\ntests/test_integration_auth.py:89:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n   |\n87 |         response = self.client.get(\"/api/captures\", headers=headers)\n88 | \n89 |         assert response.status_code == 200\n   |                                        ^^^ PLR2004\n90 |         assert response.json() == []\n   |\n\ntests/test_integration_auth.py:90:9: S101 Use of `assert` detected\n   |\n89 |         assert response.status_code == 200\n90 |         assert response.json() == []\n   |         ^^^^^^ S101\n91 | \n92 |         # Verify user ID was passed to database query\n   |\n\ntests/test_integration_auth.py:95:9: S101 Use of `assert` detected\n   |\n93 |         mock_list_captures.assert_called_once()\n94 |         call_args = mock_list_captures.call_args\n95 |         assert call_args[1][\"user_id\"] == \"user-123\"\n   |         ^^^^^^ S101\n96 | \n97 |     @patch(\"app.auth.deps.verify_jwt_token\")\n   |\n\ntests/test_integration_auth.py:111:9: S101 Use of `assert` detected\n    |\n109 |         response = self.client.get(\"/api/auth/status\", headers=headers)\n110 | \n111 |         assert response.status_code == 200\n    |         ^^^^^^ S101\n112 |         data = response.json()\n113 |         assert data[\"authenticated\"] is True\n    |\n\ntests/test_integration_auth.py:111:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable\n    |\n109 |         response = self.client.get(\"/api/auth/status\", headers=headers)\n110 | \n111 |         assert response.status_code == 200\n    |                                        ^^^ PLR2004\n112 |         data = response.json()\n113 |         assert data[\"authenticated\"] is True\n    |\n\ntests/test_integration_auth.py:113:9: S101 Use of `assert` detected\n    |\n111 |         assert response.status_code == 200\n112 |         data = response.json()\n113 |         assert data[\"authenticated\"] is True\n    |         ^^^^^^ S101\n114 |         assert data[\"user_id\"] == \"user-123\"\n115 |         assert data[\"role\"] == \"operator\"\n    |\n\ntests/test_integration_auth.py:114:9: S101 Use of `assert` detected\n    |\n112 |         data = response.json()\n113 |         assert data[\"authenticated\"] is True\n114 |         assert data[\"user_id\"] == \"user-123\"\n    |         ^^^^^^ S101\n115 |         assert data[\"role\"] == \"operator\"\n116 |         assert data[\"permissions\"][\"can_view\"] is True\n    |\n\ntests/test_integration_auth.py:115:9: S101 Use of `assert` detected\n    |\n113 |         assert data[\"authenticated\"] is True\n114 |         assert data[\"user_id\"] == \"user-123\"\n115 |         assert data[\"role\"] == \"operator\"\n    |         ^^^^^^ S101\n116 |         assert data[\"permissions\"][\"can_view\"] is True\n117 |         assert data[\"permissions\"][\"can_trigger_captures\"] is True\n    |\n\ntests/test_integration_auth.py:116:9: S101 Use of `assert` detected\n    |\n114 |         assert data[\"user_id\"] == \"user-123\"\n115 |         assert data[\"role\"] == \"operator\"\n116 |         assert data[\"permissions\"][\"can_view\"] is True\n    |         ^^^^^^ S101\n117 |         assert data[\"permissions\"][\"can_trigger_captures\"] is True\n118 |         assert data[\"permissions\"][\"can_admin\"] is False\n    |\n\ntests/test_integration_auth.py:117:9: S101 Use of `assert` detected\n    |\n115 |         assert data[\"role\"] == \"operator\"\n116 |         assert data[\"permissions\"][\"can_view\"] is True\n117 |         assert data[\"permissions\"][\"can_trigger_captures\"] is True\n    |         ^^^^^^ S101\n118 |         assert data[\"permissions\"][\"can_admin\"] is False\n    |\n\ntests/test_integration_auth.py:118:9: S101 Use of `assert` detected\n    |\n116 |         assert data[\"permissions\"][\"can_view\"] is True\n117 |         assert data[\"permissions\"][\"can_trigger_captures\"] is True\n118 |         assert data[\"permissions\"][\"can_admin\"] is False\n    |         ^^^^^^ S101\n119 | \n120 |     def test_invalid_authorization_scheme(self):\n    |\n\ntests/test_integration_auth.py:124:9: S101 Use of `assert` detected\n    |\n122 |         headers = {\"Authorization\": \"Basic invalid-token\"}\n123 |         response = self.client.get(\"/api/captures\", headers=headers)\n124 |         assert response.status_code == 401\n    |         ^^^^^^ S101\n125 |         assert \"Invalid authorization scheme\" in response.json()[\"detail\"]\n    |\n\ntests/test_integration_auth.py:124:40: PLR2004 Magic value used in comparison, consider replacing `401` with a constant variable\n    |\n122 |         headers = {\"Authorization\": \"Basic invalid-token\"}\n123 |         response = self.client.get(\"/api/captures\", headers=headers)\n124 |         assert response.status_code == 401\n    |                                        ^^^ PLR2004\n125 |         assert \"Invalid authorization scheme\" in response.json()[\"detail\"]\n    |\n\ntests/test_integration_auth.py:125:9: S101 Use of `assert` detected\n    |\n123 |         response = self.client.get(\"/api/captures\", headers=headers)\n124 |         assert response.status_code == 401\n125 |         assert \"Invalid authorization scheme\" in response.json()[\"detail\"]\n    |         ^^^^^^ S101\n126 | \n127 |     def test_malformed_authorization_header(self):\n    |\n\ntests/test_integration_auth.py:131:9: S101 Use of `assert` detected\n    |\n129 |         headers = {\"Authorization\": \"Bearer\"}\n130 |         response = self.client.get(\"/api/captures\", headers=headers)\n131 |         assert response.status_code == 401\n    |         ^^^^^^ S101\n132 |         assert \"Invalid authorization header format\" in response.json()[\"detail\"]\n    |\n\ntests/test_integration_auth.py:131:40: PLR2004 Magic value used in comparison, consider replacing `401` with a constant variable\n    |\n129 |         headers = {\"Authorization\": \"Bearer\"}\n130 |         response = self.client.get(\"/api/captures\", headers=headers)\n131 |         assert response.status_code == 401\n    |                                        ^^^ PLR2004\n132 |         assert \"Invalid authorization header format\" in response.json()[\"detail\"]\n    |\n\ntests/test_integration_auth.py:132:9: S101 Use of `assert` detected\n    |\n130 |         response = self.client.get(\"/api/captures\", headers=headers)\n131 |         assert response.status_code == 401\n132 |         assert \"Invalid authorization header format\" in response.json()[\"detail\"]\n    |         ^^^^^^ S101\n    |\n\ntests/test_storage_dynamo.py:44:9: S101 Use of `assert` detected\n   |\n42 |         )\n43 | \n44 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n   |         ^^^^^^ S101\n45 |         assert result[\"url\"] == data[\"url\"]\n46 |         assert result[\"sha256\"] == data[\"sha256\"]\n   |\n\ntests/test_storage_dynamo.py:45:9: S101 Use of `assert` detected\n   |\n44 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n45 |         assert result[\"url\"] == data[\"url\"]\n   |         ^^^^^^ S101\n46 |         assert result[\"sha256\"] == data[\"sha256\"]\n47 |         assert result[\"s3_key\"] == data[\"s3_key\"]\n   |\n\ntests/test_storage_dynamo.py:46:9: S101 Use of `assert` detected\n   |\n44 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n45 |         assert result[\"url\"] == data[\"url\"]\n46 |         assert result[\"sha256\"] == data[\"sha256\"]\n   |         ^^^^^^ S101\n47 |         assert result[\"s3_key\"] == data[\"s3_key\"]\n48 |         assert result[\"artifact_type\"] == data[\"artifact_type\"]\n   |\n\ntests/test_storage_dynamo.py:47:9: S101 Use of `assert` detected\n   |\n45 |         assert result[\"url\"] == data[\"url\"]\n46 |         assert result[\"sha256\"] == data[\"sha256\"]\n47 |         assert result[\"s3_key\"] == data[\"s3_key\"]\n   |         ^^^^^^ S101\n48 |         assert result[\"artifact_type\"] == data[\"artifact_type\"]\n49 |         assert result[\"user_id\"] == data[\"user_id\"]\n   |\n\ntests/test_storage_dynamo.py:48:9: S101 Use of `assert` detected\n   |\n46 |         assert result[\"sha256\"] == data[\"sha256\"]\n47 |         assert result[\"s3_key\"] == data[\"s3_key\"]\n48 |         assert result[\"artifact_type\"] == data[\"artifact_type\"]\n   |         ^^^^^^ S101\n49 |         assert result[\"user_id\"] == data[\"user_id\"]\n50 |         assert result[\"status\"] == \"completed\"\n   |\n\ntests/test_storage_dynamo.py:49:9: S101 Use of `assert` detected\n   |\n47 |         assert result[\"s3_key\"] == data[\"s3_key\"]\n48 |         assert result[\"artifact_type\"] == data[\"artifact_type\"]\n49 |         assert result[\"user_id\"] == data[\"user_id\"]\n   |         ^^^^^^ S101\n50 |         assert result[\"status\"] == \"completed\"\n51 |         assert \"created_at\" in result\n   |\n\ntests/test_storage_dynamo.py:50:9: S101 Use of `assert` detected\n   |\n48 |         assert result[\"artifact_type\"] == data[\"artifact_type\"]\n49 |         assert result[\"user_id\"] == data[\"user_id\"]\n50 |         assert result[\"status\"] == \"completed\"\n   |         ^^^^^^ S101\n51 |         assert \"created_at\" in result\n52 |         assert isinstance(result[\"created_at\"], Decimal)\n   |\n\ntests/test_storage_dynamo.py:51:9: S101 Use of `assert` detected\n   |\n49 |         assert result[\"user_id\"] == data[\"user_id\"]\n50 |         assert result[\"status\"] == \"completed\"\n51 |         assert \"created_at\" in result\n   |         ^^^^^^ S101\n52 |         assert isinstance(result[\"created_at\"], Decimal)\n   |\n\ntests/test_storage_dynamo.py:52:9: S101 Use of `assert` detected\n   |\n50 |         assert result[\"status\"] == \"completed\"\n51 |         assert \"created_at\" in result\n52 |         assert isinstance(result[\"created_at\"], Decimal)\n   |         ^^^^^^ S101\n53 | \n54 |     def test_create_capture_minimal_data(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n   |\n\ntests/test_storage_dynamo.py:65:9: S101 Use of `assert` detected\n   |\n63 |         )\n64 | \n65 |         assert result[\"capture_id\"] == \"minimal-capture\"\n   |         ^^^^^^ S101\n66 |         assert result[\"metadata\"] == {}\n   |\n\ntests/test_storage_dynamo.py:66:9: S101 Use of `assert` detected\n   |\n65 |         assert result[\"capture_id\"] == \"minimal-capture\"\n66 |         assert result[\"metadata\"] == {}\n   |         ^^^^^^ S101\n67 | \n68 |     def test_get_capture_success(\n   |\n\ntests/test_storage_dynamo.py:88:9: S101 Use of `assert` detected\n   |\n86 |         result = get_capture(data[\"capture_id\"])\n87 | \n88 |         assert result is not None\n   |         ^^^^^^ S101\n89 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n90 |         assert result[\"url\"] == data[\"url\"]\n   |\n\ntests/test_storage_dynamo.py:89:9: S101 Use of `assert` detected\n   |\n88 |         assert result is not None\n89 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n   |         ^^^^^^ S101\n90 |         assert result[\"url\"] == data[\"url\"]\n91 |         assert result[\"sha256\"] == data[\"sha256\"]\n   |\n\ntests/test_storage_dynamo.py:90:9: S101 Use of `assert` detected\n   |\n88 |         assert result is not None\n89 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n90 |         assert result[\"url\"] == data[\"url\"]\n   |         ^^^^^^ S101\n91 |         assert result[\"sha256\"] == data[\"sha256\"]\n   |\n\ntests/test_storage_dynamo.py:91:9: S101 Use of `assert` detected\n   |\n89 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n90 |         assert result[\"url\"] == data[\"url\"]\n91 |         assert result[\"sha256\"] == data[\"sha256\"]\n   |         ^^^^^^ S101\n92 | \n93 |     def test_get_capture_not_found(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n   |\n\ntests/test_storage_dynamo.py:97:9: S101 Use of `assert` detected\n   |\n95 |         result = get_capture(\"nonexistent-capture\")\n96 | \n97 |         assert result is None\n   |         ^^^^^^ S101\n98 | \n99 |     def test_list_captures_by_user(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n   |\n\ntests/test_storage_dynamo.py:126:9: S101 Use of `assert` detected\n    |\n124 |         result = list_captures_by_user(user_id)\n125 | \n126 |         assert result[\"count\"] == 3\n    |         ^^^^^^ S101\n127 |         assert len(result[\"items\"]) == 3\n    |\n\ntests/test_storage_dynamo.py:126:35: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n    |\n124 |         result = list_captures_by_user(user_id)\n125 | \n126 |         assert result[\"count\"] == 3\n    |                                   ^ PLR2004\n127 |         assert len(result[\"items\"]) == 3\n    |\n\ntests/test_storage_dynamo.py:127:9: S101 Use of `assert` detected\n    |\n126 |         assert result[\"count\"] == 3\n127 |         assert len(result[\"items\"]) == 3\n    |         ^^^^^^ S101\n128 | \n129 |         # Verify all captures belong to the correct user\n    |\n\ntests/test_storage_dynamo.py:127:40: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n    |\n126 |         assert result[\"count\"] == 3\n127 |         assert len(result[\"items\"]) == 3\n    |                                        ^ PLR2004\n128 | \n129 |         # Verify all captures belong to the correct user\n    |\n\ntests/test_storage_dynamo.py:131:13: S101 Use of `assert` detected\n    |\n129 |         # Verify all captures belong to the correct user\n130 |         for item in result[\"items\"]:\n131 |             assert item[\"user_id\"] == user_id\n    |             ^^^^^^ S101\n132 | \n133 |     def test_list_captures_by_user_with_limit(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:150:9: S101 Use of `assert` detected\n    |\n148 |         result = list_captures_by_user(user_id, limit=3)\n149 | \n150 |         assert result[\"count\"] == 3\n    |         ^^^^^^ S101\n151 |         assert len(result[\"items\"]) == 3\n    |\n\ntests/test_storage_dynamo.py:150:35: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n    |\n148 |         result = list_captures_by_user(user_id, limit=3)\n149 | \n150 |         assert result[\"count\"] == 3\n    |                                   ^ PLR2004\n151 |         assert len(result[\"items\"]) == 3\n    |\n\ntests/test_storage_dynamo.py:151:9: S101 Use of `assert` detected\n    |\n150 |         assert result[\"count\"] == 3\n151 |         assert len(result[\"items\"]) == 3\n    |         ^^^^^^ S101\n152 | \n153 |     def test_get_capture_by_hash(\n    |\n\ntests/test_storage_dynamo.py:151:40: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n    |\n150 |         assert result[\"count\"] == 3\n151 |         assert len(result[\"items\"]) == 3\n    |                                        ^ PLR2004\n152 | \n153 |     def test_get_capture_by_hash(\n    |\n\ntests/test_storage_dynamo.py:172:9: S101 Use of `assert` detected\n    |\n170 |         result = get_capture_by_hash(data[\"sha256\"])\n171 | \n172 |         assert result is not None\n    |         ^^^^^^ S101\n173 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n174 |         assert result[\"sha256\"] == data[\"sha256\"]\n    |\n\ntests/test_storage_dynamo.py:173:9: S101 Use of `assert` detected\n    |\n172 |         assert result is not None\n173 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n    |         ^^^^^^ S101\n174 |         assert result[\"sha256\"] == data[\"sha256\"]\n    |\n\ntests/test_storage_dynamo.py:174:9: S101 Use of `assert` detected\n    |\n172 |         assert result is not None\n173 |         assert result[\"capture_id\"] == data[\"capture_id\"]\n174 |         assert result[\"sha256\"] == data[\"sha256\"]\n    |         ^^^^^^ S101\n175 | \n176 |     def test_get_capture_by_hash_not_found(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:180:9: S101 Use of `assert` detected\n    |\n178 |         result = get_capture_by_hash(\"nonexistent-hash\")\n179 | \n180 |         assert result is None\n    |         ^^^^^^ S101\n    |\n\ntests/test_storage_dynamo.py:203:9: S101 Use of `assert` detected\n    |\n201 |         )\n202 | \n203 |         assert result[\"schedule_id\"] == schedule_id\n    |         ^^^^^^ S101\n204 |         assert result[\"user_id\"] == user_id\n205 |         assert result[\"url\"] == url\n    |\n\ntests/test_storage_dynamo.py:204:9: S101 Use of `assert` detected\n    |\n203 |         assert result[\"schedule_id\"] == schedule_id\n204 |         assert result[\"user_id\"] == user_id\n    |         ^^^^^^ S101\n205 |         assert result[\"url\"] == url\n206 |         assert result[\"cron_expression\"] == cron_expression\n    |\n\ntests/test_storage_dynamo.py:205:9: S101 Use of `assert` detected\n    |\n203 |         assert result[\"schedule_id\"] == schedule_id\n204 |         assert result[\"user_id\"] == user_id\n205 |         assert result[\"url\"] == url\n    |         ^^^^^^ S101\n206 |         assert result[\"cron_expression\"] == cron_expression\n207 |         assert result[\"artifact_type\"] == \"pdf\"\n    |\n\ntests/test_storage_dynamo.py:206:9: S101 Use of `assert` detected\n    |\n204 |         assert result[\"user_id\"] == user_id\n205 |         assert result[\"url\"] == url\n206 |         assert result[\"cron_expression\"] == cron_expression\n    |         ^^^^^^ S101\n207 |         assert result[\"artifact_type\"] == \"pdf\"\n208 |         assert result[\"enabled\"] is True\n    |\n\ntests/test_storage_dynamo.py:207:9: S101 Use of `assert` detected\n    |\n205 |         assert result[\"url\"] == url\n206 |         assert result[\"cron_expression\"] == cron_expression\n207 |         assert result[\"artifact_type\"] == \"pdf\"\n    |         ^^^^^^ S101\n208 |         assert result[\"enabled\"] is True\n209 |         assert \"created_at\" in result\n    |\n\ntests/test_storage_dynamo.py:208:9: S101 Use of `assert` detected\n    |\n206 |         assert result[\"cron_expression\"] == cron_expression\n207 |         assert result[\"artifact_type\"] == \"pdf\"\n208 |         assert result[\"enabled\"] is True\n    |         ^^^^^^ S101\n209 |         assert \"created_at\" in result\n210 |         assert \"updated_at\" in result\n    |\n\ntests/test_storage_dynamo.py:209:9: S101 Use of `assert` detected\n    |\n207 |         assert result[\"artifact_type\"] == \"pdf\"\n208 |         assert result[\"enabled\"] is True\n209 |         assert \"created_at\" in result\n    |         ^^^^^^ S101\n210 |         assert \"updated_at\" in result\n211 |         assert \"next_capture_time\" in result\n    |\n\ntests/test_storage_dynamo.py:210:9: S101 Use of `assert` detected\n    |\n208 |         assert result[\"enabled\"] is True\n209 |         assert \"created_at\" in result\n210 |         assert \"updated_at\" in result\n    |         ^^^^^^ S101\n211 |         assert \"next_capture_time\" in result\n    |\n\ntests/test_storage_dynamo.py:211:9: S101 Use of `assert` detected\n    |\n209 |         assert \"created_at\" in result\n210 |         assert \"updated_at\" in result\n211 |         assert \"next_capture_time\" in result\n    |         ^^^^^^ S101\n212 | \n213 |     def test_create_schedule_with_defaults(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:222:9: S101 Use of `assert` detected\n    |\n220 |         )\n221 | \n222 |         assert result[\"artifact_type\"] == \"pdf\"\n    |         ^^^^^^ S101\n223 |         assert result[\"enabled\"] is True\n224 |         assert result[\"metadata\"] == {}\n    |\n\ntests/test_storage_dynamo.py:223:9: S101 Use of `assert` detected\n    |\n222 |         assert result[\"artifact_type\"] == \"pdf\"\n223 |         assert result[\"enabled\"] is True\n    |         ^^^^^^ S101\n224 |         assert result[\"metadata\"] == {}\n    |\n\ntests/test_storage_dynamo.py:224:9: S101 Use of `assert` detected\n    |\n222 |         assert result[\"artifact_type\"] == \"pdf\"\n223 |         assert result[\"enabled\"] is True\n224 |         assert result[\"metadata\"] == {}\n    |         ^^^^^^ S101\n225 | \n226 |     def test_get_schedule_success(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:241:9: S101 Use of `assert` detected\n    |\n239 |         result = get_schedule(schedule_id)\n240 | \n241 |         assert result is not None\n    |         ^^^^^^ S101\n242 |         assert result[\"schedule_id\"] == schedule_id\n    |\n\ntests/test_storage_dynamo.py:242:9: S101 Use of `assert` detected\n    |\n241 |         assert result is not None\n242 |         assert result[\"schedule_id\"] == schedule_id\n    |         ^^^^^^ S101\n243 | \n244 |     def test_get_schedule_not_found(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:248:9: S101 Use of `assert` detected\n    |\n246 |         result = get_schedule(\"nonexistent-schedule\")\n247 | \n248 |         assert result is None\n    |         ^^^^^^ S101\n249 | \n250 |     def test_list_schedules_by_user(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:273:9: S101 Use of `assert` detected\n    |\n271 |         result = list_schedules_by_user(user_id)\n272 | \n273 |         assert result[\"count\"] == 3\n    |         ^^^^^^ S101\n274 |         assert len(result[\"items\"]) == 3\n    |\n\ntests/test_storage_dynamo.py:273:35: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n    |\n271 |         result = list_schedules_by_user(user_id)\n272 | \n273 |         assert result[\"count\"] == 3\n    |                                   ^ PLR2004\n274 |         assert len(result[\"items\"]) == 3\n    |\n\ntests/test_storage_dynamo.py:274:9: S101 Use of `assert` detected\n    |\n273 |         assert result[\"count\"] == 3\n274 |         assert len(result[\"items\"]) == 3\n    |         ^^^^^^ S101\n275 | \n276 |         # Verify all schedules belong to the correct user\n    |\n\ntests/test_storage_dynamo.py:274:40: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable\n    |\n273 |         assert result[\"count\"] == 3\n274 |         assert len(result[\"items\"]) == 3\n    |                                        ^ PLR2004\n275 | \n276 |         # Verify all schedules belong to the correct user\n    |\n\ntests/test_storage_dynamo.py:278:13: S101 Use of `assert` detected\n    |\n276 |         # Verify all schedules belong to the correct user\n277 |         for item in result[\"items\"]:\n278 |             assert item[\"user_id\"] == user_id\n    |             ^^^^^^ S101\n279 | \n280 |     def test_update_schedule_success(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:302:9: S101 Use of `assert` detected\n    |\n300 |         result = update_schedule(schedule_id, updates)\n301 | \n302 |         assert result is not None\n    |         ^^^^^^ S101\n303 |         assert result[\"schedule_id\"] == schedule_id\n304 |         assert result[\"enabled\"] is False\n    |\n\ntests/test_storage_dynamo.py:303:9: S101 Use of `assert` detected\n    |\n302 |         assert result is not None\n303 |         assert result[\"schedule_id\"] == schedule_id\n    |         ^^^^^^ S101\n304 |         assert result[\"enabled\"] is False\n305 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n    |\n\ntests/test_storage_dynamo.py:304:9: S101 Use of `assert` detected\n    |\n302 |         assert result is not None\n303 |         assert result[\"schedule_id\"] == schedule_id\n304 |         assert result[\"enabled\"] is False\n    |         ^^^^^^ S101\n305 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n306 |         assert result[\"url\"] == \"https://updated.com\"\n    |\n\ntests/test_storage_dynamo.py:305:9: S101 Use of `assert` detected\n    |\n303 |         assert result[\"schedule_id\"] == schedule_id\n304 |         assert result[\"enabled\"] is False\n305 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n    |         ^^^^^^ S101\n306 |         assert result[\"url\"] == \"https://updated.com\"\n    |\n\ntests/test_storage_dynamo.py:306:9: S101 Use of `assert` detected\n    |\n304 |         assert result[\"enabled\"] is False\n305 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n306 |         assert result[\"url\"] == \"https://updated.com\"\n    |         ^^^^^^ S101\n307 | \n308 |         # Verify updated_at was modified\n    |\n\ntests/test_storage_dynamo.py:309:9: S101 Use of `assert` detected\n    |\n308 |         # Verify updated_at was modified\n309 |         assert \"updated_at\" in result\n    |         ^^^^^^ S101\n310 | \n311 |     def test_update_schedule_not_found(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:313:9: F841 Local variable `result` is assigned to but never used\n    |\n311 |     def test_update_schedule_not_found(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n312 |         \"\"\"Test updating non-existent schedule.\"\"\"\n313 |         result = update_schedule(\"nonexistent-schedule\", {\"enabled\": False})\n    |         ^^^^^^ F841\n314 | \n315 |         # moto doesn't raise an error for updating non-existent items\n    |\n    = help: Remove assignment to unused variable `result`\n\ntests/test_storage_dynamo.py:343:9: S101 Use of `assert` detected\n    |\n341 |         result = update_schedule(schedule_id, updates)\n342 | \n343 |         assert result is not None\n    |         ^^^^^^ S101\n344 |         assert result[\"url\"] == \"https://updated.com\"\n345 |         assert result[\"enabled\"] is False\n    |\n\ntests/test_storage_dynamo.py:344:9: S101 Use of `assert` detected\n    |\n343 |         assert result is not None\n344 |         assert result[\"url\"] == \"https://updated.com\"\n    |         ^^^^^^ S101\n345 |         assert result[\"enabled\"] is False\n    |\n\ntests/test_storage_dynamo.py:345:9: S101 Use of `assert` detected\n    |\n343 |         assert result is not None\n344 |         assert result[\"url\"] == \"https://updated.com\"\n345 |         assert result[\"enabled\"] is False\n    |         ^^^^^^ S101\n346 | \n347 |     def test_update_schedule_no_reserved_keywords(\n    |\n\ntests/test_storage_dynamo.py:370:9: S101 Use of `assert` detected\n    |\n368 |         result = update_schedule(schedule_id, updates)\n369 | \n370 |         assert result is not None\n    |         ^^^^^^ S101\n371 |         assert result[\"enabled\"] is False\n372 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n    |\n\ntests/test_storage_dynamo.py:371:9: S101 Use of `assert` detected\n    |\n370 |         assert result is not None\n371 |         assert result[\"enabled\"] is False\n    |         ^^^^^^ S101\n372 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n373 |         assert result[\"artifact_type\"] == \"png\"\n    |\n\ntests/test_storage_dynamo.py:372:9: S101 Use of `assert` detected\n    |\n370 |         assert result is not None\n371 |         assert result[\"enabled\"] is False\n372 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n    |         ^^^^^^ S101\n373 |         assert result[\"artifact_type\"] == \"png\"\n    |\n\ntests/test_storage_dynamo.py:373:9: S101 Use of `assert` detected\n    |\n371 |         assert result[\"enabled\"] is False\n372 |         assert result[\"cron_expression\"] == \"0 18 * * *\"\n373 |         assert result[\"artifact_type\"] == \"png\"\n    |         ^^^^^^ S101\n374 | \n375 |     def test_delete_schedule_success(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:390:9: S101 Use of `assert` detected\n    |\n388 |         result = delete_schedule(schedule_id)\n389 | \n390 |         assert result is True\n    |         ^^^^^^ S101\n391 | \n392 |         # Verify schedule is deleted\n    |\n\ntests/test_storage_dynamo.py:394:9: S101 Use of `assert` detected\n    |\n392 |         # Verify schedule is deleted\n393 |         deleted_schedule = get_schedule(schedule_id)\n394 |         assert deleted_schedule is None\n    |         ^^^^^^ S101\n395 | \n396 |     def test_delete_schedule_not_found(self, mock_dynamodb_tables: dict[str, Any]) -> None:\n    |\n\ntests/test_storage_dynamo.py:401:9: S101 Use of `assert` detected\n    |\n400 |         # DynamoDB delete operations are idempotent\n401 |         assert result is True\n    |         ^^^^^^ S101\n    |\n\ntests/test_storage_dynamo.py:440:13: S101 Use of `assert` detected\n    |\n438 |             result = get_capture(\"error-test\")\n439 | \n440 |             assert result is None\n    |             ^^^^^^ S101\n    |\n\ntests/test_storage_s3.py:32:13: S101 Use of `assert` detected\n   |\n30 |             client = s3_client()\n31 | \n32 |             assert client == mock_client\n   |             ^^^^^^ S101\n33 |             mock_boto3.assert_called_once()\n   |\n\ntests/test_storage_s3.py:58:13: S101 Use of `assert` detected\n   |\n57 |             # Verify result structure\n58 |             assert result[\"bucket\"] == \"test-artifacts-bucket\"\n   |             ^^^^^^ S101\n59 |             assert result[\"key\"] == key\n60 |             assert result[\"version_id\"] == \"test-version-id\"\n   |\n\ntests/test_storage_s3.py:59:13: S101 Use of `assert` detected\n   |\n57 |             # Verify result structure\n58 |             assert result[\"bucket\"] == \"test-artifacts-bucket\"\n59 |             assert result[\"key\"] == key\n   |             ^^^^^^ S101\n60 |             assert result[\"version_id\"] == \"test-version-id\"\n61 |             assert result[\"etag\"] == '\"test-etag\"'\n   |\n\ntests/test_storage_s3.py:60:13: S101 Use of `assert` detected\n   |\n58 |             assert result[\"bucket\"] == \"test-artifacts-bucket\"\n59 |             assert result[\"key\"] == key\n60 |             assert result[\"version_id\"] == \"test-version-id\"\n   |             ^^^^^^ S101\n61 |             assert result[\"etag\"] == '\"test-etag\"'\n62 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n   |\n\ntests/test_storage_s3.py:61:13: S101 Use of `assert` detected\n   |\n59 |             assert result[\"key\"] == key\n60 |             assert result[\"version_id\"] == \"test-version-id\"\n61 |             assert result[\"etag\"] == '\"test-etag\"'\n   |             ^^^^^^ S101\n62 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n63 |             assert \"retention_until\" in result\n   |\n\ntests/test_storage_s3.py:62:13: S101 Use of `assert` detected\n   |\n60 |             assert result[\"version_id\"] == \"test-version-id\"\n61 |             assert result[\"etag\"] == '\"test-etag\"'\n62 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n   |             ^^^^^^ S101\n63 |             assert \"retention_until\" in result\n   |\n\ntests/test_storage_s3.py:63:13: S101 Use of `assert` detected\n   |\n61 |             assert result[\"etag\"] == '\"test-etag\"'\n62 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n63 |             assert \"retention_until\" in result\n   |             ^^^^^^ S101\n64 | \n65 |             # Verify put_object was called with correct parameters\n   |\n\ntests/test_storage_s3.py:69:13: S101 Use of `assert` detected\n   |\n67 |             call_kwargs = mock_client.put_object.call_args[1]\n68 | \n69 |             assert call_kwargs[\"Bucket\"] == \"test-artifacts-bucket\"\n   |             ^^^^^^ S101\n70 |             assert call_kwargs[\"Key\"] == key\n71 |             assert call_kwargs[\"Body\"] == data\n   |\n\ntests/test_storage_s3.py:70:13: S101 Use of `assert` detected\n   |\n69 |             assert call_kwargs[\"Bucket\"] == \"test-artifacts-bucket\"\n70 |             assert call_kwargs[\"Key\"] == key\n   |             ^^^^^^ S101\n71 |             assert call_kwargs[\"Body\"] == data\n72 |             assert call_kwargs[\"ServerSideEncryption\"] == \"aws:kms\"\n   |\n\ntests/test_storage_s3.py:71:13: S101 Use of `assert` detected\n   |\n69 |             assert call_kwargs[\"Bucket\"] == \"test-artifacts-bucket\"\n70 |             assert call_kwargs[\"Key\"] == key\n71 |             assert call_kwargs[\"Body\"] == data\n   |             ^^^^^^ S101\n72 |             assert call_kwargs[\"ServerSideEncryption\"] == \"aws:kms\"\n73 |             assert call_kwargs[\"ObjectLockMode\"] == \"COMPLIANCE\"\n   |\n\ntests/test_storage_s3.py:72:13: S101 Use of `assert` detected\n   |\n70 |             assert call_kwargs[\"Key\"] == key\n71 |             assert call_kwargs[\"Body\"] == data\n72 |             assert call_kwargs[\"ServerSideEncryption\"] == \"aws:kms\"\n   |             ^^^^^^ S101\n73 |             assert call_kwargs[\"ObjectLockMode\"] == \"COMPLIANCE\"\n74 |             assert \"ObjectLockRetainUntilDate\" in call_kwargs\n   |\n\ntests/test_storage_s3.py:73:13: S101 Use of `assert` detected\n   |\n71 |             assert call_kwargs[\"Body\"] == data\n72 |             assert call_kwargs[\"ServerSideEncryption\"] == \"aws:kms\"\n73 |             assert call_kwargs[\"ObjectLockMode\"] == \"COMPLIANCE\"\n   |             ^^^^^^ S101\n74 |             assert \"ObjectLockRetainUntilDate\" in call_kwargs\n   |\n\ntests/test_storage_s3.py:74:13: S101 Use of `assert` detected\n   |\n72 |             assert call_kwargs[\"ServerSideEncryption\"] == \"aws:kms\"\n73 |             assert call_kwargs[\"ObjectLockMode\"] == \"COMPLIANCE\"\n74 |             assert \"ObjectLockRetainUntilDate\" in call_kwargs\n   |             ^^^^^^ S101\n75 | \n76 |     def test_upload_artifact_with_custom_retention(self, mock_s3_bucket: str) -> None:\n   |\n\ntests/test_storage_s3.py:89:13: F841 Local variable `after_upload` is assigned to but never used\n   |\n87 |             before_upload = datetime.now(UTC)\n88 |             result = upload_artifact(key, data, retention_days=retention_days)\n89 |             after_upload = datetime.now(UTC)\n   |             ^^^^^^^^^^^^ F841\n90 | \n91 |             # Parse retention date and verify it's approximately correct\n   |\n   = help: Remove assignment to unused variable `after_upload`\n\ntests/test_storage_s3.py:96:13: S101 Use of `assert` detected\n   |\n95 |             # Allow 1 minute tolerance for test execution time\n96 |             assert abs((retention_date - expected_retention).total_seconds()) < 60\n   |             ^^^^^^ S101\n97 | \n98 |     def test_upload_artifact_failure(self, mock_s3_bucket: str) -> None:\n   |\n\ntests/test_storage_s3.py:96:81: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable\n   |\n95 |             # Allow 1 minute tolerance for test execution time\n96 |             assert abs((retention_date - expected_retention).total_seconds()) < 60\n   |                                                                                 ^^ PLR2004\n97 | \n98 |     def test_upload_artifact_failure(self, mock_s3_bucket: str) -> None:\n   |\n\ntests/test_storage_s3.py:127:13: S101 Use of `assert` detected\n    |\n125 |             result = upload_artifact(key, data)\n126 | \n127 |             assert result[\"key\"] == key\n    |             ^^^^^^ S101\n128 |             assert result[\"version_id\"] == \"empty-version\"\n    |\n\ntests/test_storage_s3.py:128:13: S101 Use of `assert` detected\n    |\n127 |             assert result[\"key\"] == key\n128 |             assert result[\"version_id\"] == \"empty-version\"\n    |             ^^^^^^ S101\n129 | \n130 |             # Verify put_object was called with empty data\n    |\n\ntests/test_storage_s3.py:132:13: S101 Use of `assert` detected\n    |\n130 |             # Verify put_object was called with empty data\n131 |             call_kwargs = mock_client.put_object.call_args[1]\n132 |             assert call_kwargs[\"Body\"] == b\"\"\n    |             ^^^^^^ S101\n133 | \n134 |     def test_upload_artifact_no_metadata(self, mock_s3_bucket: str) -> None:\n    |\n\ntests/test_storage_s3.py:146:13: S101 Use of `assert` detected\n    |\n144 |             result = upload_artifact(key, data, metadata=None)\n145 | \n146 |             assert result[\"key\"] == key\n    |             ^^^^^^ S101\n147 | \n148 |             # Verify metadata still includes compliance fields\n    |\n\ntests/test_storage_s3.py:151:13: S101 Use of `assert` detected\n    |\n149 |             call_kwargs = mock_client.put_object.call_args[1]\n150 |             metadata = call_kwargs[\"Metadata\"]\n151 |             assert \"captured-at\" in metadata\n    |             ^^^^^^ S101\n152 |             assert \"retention-until\" in metadata\n    |\n\ntests/test_storage_s3.py:152:13: S101 Use of `assert` detected\n    |\n150 |             metadata = call_kwargs[\"Metadata\"]\n151 |             assert \"captured-at\" in metadata\n152 |             assert \"retention-until\" in metadata\n    |             ^^^^^^ S101\n    |\n\ntests/test_storage_s3.py:174:13: S101 Use of `assert` detected\n    |\n172 |             result = get_artifact(key)\n173 | \n174 |             assert result == expected_data\n    |             ^^^^^^ S101\n175 |             mock_client.get_object.assert_called_once_with(\n176 |                 Bucket=\"test-artifacts-bucket\",\n    |\n\ntests/test_storage_s3.py:196:13: S101 Use of `assert` detected\n    |\n194 |             result = get_artifact(key, version_id)\n195 | \n196 |             assert result == expected_data\n    |             ^^^^^^ S101\n197 |             mock_client.get_object.assert_called_once_with(\n198 |                 Bucket=\"test-artifacts-bucket\",\n    |\n\ntests/test_storage_s3.py:243:13: S101 Use of `assert` detected\n    |\n241 |             result = get_artifact_metadata(key)\n242 | \n243 |             assert result[\"key\"] == key\n    |             ^^^^^^ S101\n244 |             assert result[\"size\"] == 1024\n245 |             assert result[\"etag\"] == '\"test-etag\"'\n    |\n\ntests/test_storage_s3.py:244:13: S101 Use of `assert` detected\n    |\n243 |             assert result[\"key\"] == key\n244 |             assert result[\"size\"] == 1024\n    |             ^^^^^^ S101\n245 |             assert result[\"etag\"] == '\"test-etag\"'\n246 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n    |\n\ntests/test_storage_s3.py:244:38: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable\n    |\n243 |             assert result[\"key\"] == key\n244 |             assert result[\"size\"] == 1024\n    |                                      ^^^^ PLR2004\n245 |             assert result[\"etag\"] == '\"test-etag\"'\n246 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n    |\n\ntests/test_storage_s3.py:245:13: S101 Use of `assert` detected\n    |\n243 |             assert result[\"key\"] == key\n244 |             assert result[\"size\"] == 1024\n245 |             assert result[\"etag\"] == '\"test-etag\"'\n    |             ^^^^^^ S101\n246 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n247 |             assert \"last_modified\" in result\n    |\n\ntests/test_storage_s3.py:246:13: S101 Use of `assert` detected\n    |\n244 |             assert result[\"size\"] == 1024\n245 |             assert result[\"etag\"] == '\"test-etag\"'\n246 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n    |             ^^^^^^ S101\n247 |             assert \"last_modified\" in result\n248 |             assert \"version_id\" in result\n    |\n\ntests/test_storage_s3.py:247:13: S101 Use of `assert` detected\n    |\n245 |             assert result[\"etag\"] == '\"test-etag\"'\n246 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n247 |             assert \"last_modified\" in result\n    |             ^^^^^^ S101\n248 |             assert \"version_id\" in result\n249 |             assert \"object_lock_retain_until\" in result\n    |\n\ntests/test_storage_s3.py:248:13: S101 Use of `assert` detected\n    |\n246 |             assert result[\"object_lock_mode\"] == \"COMPLIANCE\"\n247 |             assert \"last_modified\" in result\n248 |             assert \"version_id\" in result\n    |             ^^^^^^ S101\n249 |             assert \"object_lock_retain_until\" in result\n250 |             assert result[\"metadata\"] == {\"custom\": \"value\"}\n    |\n\ntests/test_storage_s3.py:249:13: S101 Use of `assert` detected\n    |\n247 |             assert \"last_modified\" in result\n248 |             assert \"version_id\" in result\n249 |             assert \"object_lock_retain_until\" in result\n    |             ^^^^^^ S101\n250 |             assert result[\"metadata\"] == {\"custom\": \"value\"}\n    |\n\ntests/test_storage_s3.py:250:13: S101 Use of `assert` detected\n    |\n248 |             assert \"version_id\" in result\n249 |             assert \"object_lock_retain_until\" in result\n250 |             assert result[\"metadata\"] == {\"custom\": \"value\"}\n    |             ^^^^^^ S101\n251 | \n252 |     def test_get_artifact_metadata_with_version(self, mock_s3_bucket: str) -> None:\n    |\n\ntests/test_storage_s3.py:285:13: S101 Use of `assert` detected\n    |\n283 |             result = get_artifact_metadata(key)\n284 | \n285 |             assert result[\"key\"] == key\n    |             ^^^^^^ S101\n286 |             assert result[\"size\"] == 256\n287 |             assert result[\"etag\"] is None\n    |\n\ntests/test_storage_s3.py:286:13: S101 Use of `assert` detected\n    |\n285 |             assert result[\"key\"] == key\n286 |             assert result[\"size\"] == 256\n    |             ^^^^^^ S101\n287 |             assert result[\"etag\"] is None\n288 |             assert result[\"last_modified\"] is None\n    |\n\ntests/test_storage_s3.py:286:38: PLR2004 Magic value used in comparison, consider replacing `256` with a constant variable\n    |\n285 |             assert result[\"key\"] == key\n286 |             assert result[\"size\"] == 256\n    |                                      ^^^ PLR2004\n287 |             assert result[\"etag\"] is None\n288 |             assert result[\"last_modified\"] is None\n    |\n\ntests/test_storage_s3.py:287:13: S101 Use of `assert` detected\n    |\n285 |             assert result[\"key\"] == key\n286 |             assert result[\"size\"] == 256\n287 |             assert result[\"etag\"] is None\n    |             ^^^^^^ S101\n288 |             assert result[\"last_modified\"] is None\n289 |             assert result[\"version_id\"] is None\n    |\n\ntests/test_storage_s3.py:288:13: S101 Use of `assert` detected\n    |\n286 |             assert result[\"size\"] == 256\n287 |             assert result[\"etag\"] is None\n288 |             assert result[\"last_modified\"] is None\n    |             ^^^^^^ S101\n289 |             assert result[\"version_id\"] is None\n290 |             assert result[\"object_lock_mode\"] is None\n    |\n\ntests/test_storage_s3.py:289:13: S101 Use of `assert` detected\n    |\n287 |             assert result[\"etag\"] is None\n288 |             assert result[\"last_modified\"] is None\n289 |             assert result[\"version_id\"] is None\n    |             ^^^^^^ S101\n290 |             assert result[\"object_lock_mode\"] is None\n291 |             assert result[\"object_lock_retain_until\"] is None\n    |\n\ntests/test_storage_s3.py:290:13: S101 Use of `assert` detected\n    |\n288 |             assert result[\"last_modified\"] is None\n289 |             assert result[\"version_id\"] is None\n290 |             assert result[\"object_lock_mode\"] is None\n    |             ^^^^^^ S101\n291 |             assert result[\"object_lock_retain_until\"] is None\n292 |             assert result[\"metadata\"] == {}\n    |\n\ntests/test_storage_s3.py:291:13: S101 Use of `assert` detected\n    |\n289 |             assert result[\"version_id\"] is None\n290 |             assert result[\"object_lock_mode\"] is None\n291 |             assert result[\"object_lock_retain_until\"] is None\n    |             ^^^^^^ S101\n292 |             assert result[\"metadata\"] == {}\n    |\n\ntests/test_storage_s3.py:292:13: S101 Use of `assert` detected\n    |\n290 |             assert result[\"object_lock_mode\"] is None\n291 |             assert result[\"object_lock_retain_until\"] is None\n292 |             assert result[\"metadata\"] == {}\n    |             ^^^^^^ S101\n    |\n\ntests/test_storage_s3.py:310:13: S101 Use of `assert` detected\n    |\n308 |             result = presign_download(key)\n309 | \n310 |             assert result == expected_url\n    |             ^^^^^^ S101\n311 |             mock_client.generate_presigned_url.assert_called_once_with(\n312 |                 \"get_object\",\n    |\n\ntests/test_storage_s3.py:330:13: S101 Use of `assert` detected\n    |\n328 |             result = presign_download(key, expires)\n329 | \n330 |             assert result == expected_url\n    |             ^^^^^^ S101\n331 |             mock_client.generate_presigned_url.assert_called_once_with(\n332 |                 \"get_object\",\n    |\n\ntests/test_storage_s3.py:351:13: S101 Use of `assert` detected\n    |\n349 |             # Verify TTL was capped at 900 seconds\n350 |             call_kwargs = mock_client.generate_presigned_url.call_args[1]\n351 |             assert call_kwargs[\"ExpiresIn\"] == 900\n    |             ^^^^^^ S101\n    |\n\ntests/test_storage_s3.py:351:48: PLR2004 Magic value used in comparison, consider replacing `900` with a constant variable\n    |\n349 |             # Verify TTL was capped at 900 seconds\n350 |             call_kwargs = mock_client.generate_presigned_url.call_args[1]\n351 |             assert call_kwargs[\"ExpiresIn\"] == 900\n    |                                                ^^^ PLR2004\n    |\n\ntests/test_storage_s3.py:366:13: S101 Use of `assert` detected\n    |\n364 |             result = verify_object_lock(key)\n365 | \n366 |             assert result is True\n    |             ^^^^^^ S101\n367 |             mock_metadata.assert_called_once_with(key)\n    |\n\ntests/test_storage_s3.py:378:13: S101 Use of `assert` detected\n    |\n376 |             result = verify_object_lock(key)\n377 | \n378 |             assert result is False\n    |             ^^^^^^ S101\n379 | \n380 |     def test_verify_object_lock_error(self, mock_s3_bucket: str) -> None:\n    |\n\ntests/test_storage_s3.py:391:13: S101 Use of `assert` detected\n    |\n389 |             result = verify_object_lock(key)\n390 | \n391 |             assert result is False\n    |             ^^^^^^ S101\n    |\n\nFound 266 errors.\n[*] 2 fixable with the `--fix` option (3 hidden fixes can be enabled with the `--unsafe-fixes` option).\n",
      "error": "",
      "details": {
        "returncode": 1,
        "command": "uv run ruff check app/ tests/"
      }
    },
    {
      "name": "Ruff Format Check",
      "success": false,
      "duration": 0.030354976654052734,
      "output": "Would reformat: app/api/routes/health.py\nWould reformat: app/auth/deps.py\n2 files would be reformatted, 24 files already formatted\n",
      "error": "",
      "details": {
        "returncode": 1,
        "command": "uv run ruff format --check app/ tests/"
      }
    },
    {
      "name": "MyPy Type Checking",
      "success": true,
      "duration": 0.41114377975463867,
      "output": "Success: no issues found in 18 source files\n",
      "error": "",
      "details": {
        "returncode": 0,
        "command": "uv run mypy app/"
      }
    },
    {
      "name": "FastAPI Server Startup",
      "success": true,
      "duration": 0.23639607429504395,
      "output": "",
      "error": "",
      "details": {
        "routes_count": 15
      }
    },
    {
      "name": "Unit Tests with Coverage",
      "success": true,
      "duration": 6.106244087219238,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0\nrootdir: /Users/dannyelzein/Desktop/Python/Compliance-Screenshot-Archiver\nconfigfile: pyproject.toml\nplugins: asyncio-0.23.8, anyio-4.10.0, cov-6.2.1\nasyncio: mode=Mode.STRICT\ncollected 92 items\n\ntests/test_api_captures.py ..................                            [ 19%]\ntests/test_auth.py ...............                                       [ 35%]\ntests/test_capture_engine.py ...........                                 [ 47%]\ntests/test_integration_auth.py .........                                 [ 57%]\ntests/test_storage_dynamo.py .....................                       [ 80%]\ntests/test_storage_s3.py ..................                              [100%]\n\n================================ tests coverage ================================\n_______________ coverage: platform darwin, python 3.12.3-final-0 _______________\n\nName                              Stmts   Miss  Cover   Missing\n---------------------------------------------------------------\napp/api/__init__.py                   0      0   100%\napp/api/router.py                     7      0   100%\napp/api/routes/captures.py           64      0   100%\napp/api/routes/health.py             18      0   100%\napp/api/routes/schedules.py          18      5    72%   28, 42-45\napp/auth/deps.py                    103     24    77%   60-82, 135, 153, 155, 157-158, 161-163\napp/capture_engine/engine.py         27      0   100%\napp/capture_engine/processor.py      31     21    32%   35-124\napp/core/config.py                   37     11    70%   41-53, 65\napp/core/logging.py                  15      2    87%   33-34\napp/domain/models.py                 24      0   100%\napp/lambda_handler.py                67     67     0%   1-147\napp/main.py                          12      2    83%   23-24\napp/storage/dynamo.py               119     23    81%   140, 149-151, 174-176, 225-227, 246-248, 276, 285-287, 353-355, 374-376\napp/storage/s3.py                    61      3    95%   160-162\n---------------------------------------------------------------\nTOTAL                               603    158    74%\nCoverage HTML written to dir htmlcov\nRequired test coverage of 70% reached. Total coverage: 73.80%\n============================== 92 passed in 4.71s ==============================\n",
      "error": "",
      "details": {
        "returncode": 0,
        "command": "uv run pytest tests/ --cov=app --cov-report=term-missing --cov-report=html --cov-fail-under=70"
      }
    },
    {
      "name": "Integration Tests",
      "success": false,
      "duration": 0.6894359588623047,
      "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0\nrootdir: /Users/dannyelzein/Desktop/Python/Compliance-Screenshot-Archiver\nconfigfile: pyproject.toml\nplugins: asyncio-0.23.8, anyio-4.10.0, cov-6.2.1\nasyncio: mode=Mode.STRICT\ncollected 92 items / 92 deselected / 0 selected\n\n============================ 92 deselected in 0.23s ============================\n",
      "error": "",
      "details": {
        "returncode": 5,
        "command": "uv run pytest tests/ -m integration"
      }
    }
  ]
}