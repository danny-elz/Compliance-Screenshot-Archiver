name: "CI"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  python:
    name: "Lint & Test (Python)"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: "Install dependencies"
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy pytest pytest-asyncio moto
          pip install -e .

      - name: "Black"
        run: black --check backend/

      - name: "Ruff"
        run: ruff check backend/

      - name: "Mypy"
        # flip to strict once stubs are in place
        run: mypy backend/app || true

      - name: "Pytest"
        env:
          APP_ENV: dev
        working-directory: backend
        run: pytest -q

      - name: "Validate TASK.md Sync"
        if: github.event_name == 'pull_request'
        run: |
          # Check if code changes exist but TASK.md wasn't updated
          CODE_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "^(backend/app/|backend/infra/|backend/pyproject.toml)" | wc -l)
          TASK_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep "TASK.md" | wc -l)
          
          echo "Code changes detected: $CODE_CHANGES"
          echo "TASK.md changes detected: $TASK_CHANGES"
          
          if [ $CODE_CHANGES -gt 0 ] && [ $TASK_CHANGES -eq 0 ]; then
            echo "‚ùå ERROR: Code changes detected but TASK.md not updated!"
            echo "Please update TASK.md to reflect completed work."
            echo "See PR template for guidance."
            exit 1
          fi
          
          if [ $TASK_CHANGES -gt 0 ]; then
            echo "‚úÖ TASK.md updated - validating format..."
            # Check for proper completion markers
            if ! git diff origin/${{ github.base_ref }}..HEAD TASK.md | grep -E "(COMPLETED|\[x\])"; then
              echo "‚ö†Ô∏è  WARNING: TASK.md changed but no completion markers found"
              echo "Make sure to check off completed items and update status"
            fi
          fi
          
          echo "‚úÖ TASK.md validation passed"

  auto-update-tasks:
    name: "Auto-update TASK.md"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: "Install uv"
        run: pip install uv
          
      - name: "Auto-update TASK.md"
        env:
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python3 backend/scripts/auto_update_tasks.py
          
      - name: "Commit TASK.md updates"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --quiet TASK.md; then
            echo "üìù TASK.md was updated - committing changes"
            git add TASK.md
            git commit -m "auto: update TASK.md with completed criteria
            
ü§ñ Auto-generated by CI/CD based on detected completions
üìã Updated after commit ${{ github.sha }}"
            git push
            echo "‚úÖ TASK.md auto-update committed"
          else
            echo "‚ÑπÔ∏è  No TASK.md updates needed"
          fi

  terraform:
    name: "Terraform Validate & Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/infra

    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: "csa-ci"

      - name: "Terraform fmt"
        run: terraform fmt -check -diff

      - name: "Terraform Init"
        run: terraform init -input=false

      - name: "Terraform Validate"
        run: terraform validate

      - name: "Terraform Plan"
        run: terraform plan -input=false -out=tfplan

      - name: "Upload Plan Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: backend/infra/tfplan

      - name: "Check Infrastructure Security"
        run: |
          # Validate critical security settings in plan
          if terraform show -json tfplan | jq -e '.planned_values.root_module.resources[] | select(.type == "aws_s3_bucket_object_lock_configuration") | select(.values.rule[0].default_retention.mode != "COMPLIANCE")'  > /dev/null 2>&1; then
            echo "‚ùå ERROR: S3 Object Lock must be in COMPLIANCE mode!"
            exit 1
          fi
          
          if terraform show -json tfplan | jq -e '.planned_values.root_module.resources[] | select(.type == "aws_s3_bucket_object_lock_configuration") | select(.values.rule[0].default_retention.days < 2557)'  > /dev/null 2>&1; then
            echo "‚ùå ERROR: Retention period must be at least 7 years (2557 days)!"
            exit 1
          fi
          
          echo "‚úÖ Infrastructure security validation passed"
